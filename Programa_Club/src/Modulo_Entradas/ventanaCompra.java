/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Entradas;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Array;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONException;

/**
 *
 * @author Agustín Salinas
 */
public class ventanaCompra extends javax.swing.JFrame {
    BDD.DBConexion conexion = new BDD.DBConexion();
    private int usuarioID;
    private int eventoID;
    private JToggleButton[][] matAsientos;
    private JSONArray jsonAsientos;
    ArrayList<String> arrMiembros = new ArrayList<>();
    ArrayList<Integer> arrDescs = new ArrayList<>();
    ArrayList<Double> arrPrecios = new ArrayList<>();
    /**
     * Creates new form ventanaCompra
     */
    public ventanaCompra(int usuarioID, int eventoID) {
        initComponents();
        this.usuarioID = usuarioID;
        this.eventoID = eventoID;
        
        setChecks();
        cargarSectores();
        cmbSectores.setSelectedIndex(0); // Establecer el primer ítem como seleccionado
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        pnlEntradas = new javax.swing.JPanel();
        pnlGrupo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEntradas = new javax.swing.JTable();
        cmbSectores = new javax.swing.JComboBox<>();
        btnComprar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlAsientos = new javax.swing.JPanel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlGrupo.setBackground(new java.awt.Color(99, 140, 181));
        pnlGrupo.setBorder(javax.swing.BorderFactory.createTitledBorder("Grupo de cancha"));

        javax.swing.GroupLayout pnlGrupoLayout = new javax.swing.GroupLayout(pnlGrupo);
        pnlGrupo.setLayout(pnlGrupoLayout);
        pnlGrupoLayout.setHorizontalGroup(
            pnlGrupoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlGrupoLayout.setVerticalGroup(
            pnlGrupoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 119, Short.MAX_VALUE)
        );

        tblEntradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario", "Sector", "Fila", "Asiento", "Precio", "Descuento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEntradas.setToolTipText("Entradas");
        tblEntradas.setFocusable(false);
        tblEntradas.setRowHeight(19);
        tblEntradas.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(tblEntradas);
        if (tblEntradas.getColumnModel().getColumnCount() > 0) {
            tblEntradas.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblEntradas.getColumnModel().getColumn(2).setPreferredWidth(50);
            tblEntradas.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        cmbSectores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectoresItemStateChanged(evt);
            }
        });
        cmbSectores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSectoresActionPerformed(evt);
            }
        });

        btnComprar.setText("COMPRAR");
        btnComprar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnComprarMouseClicked(evt);
            }
        });
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("TOTAL:");

        txtTotal.setText("0");
        txtTotal.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotal.setEnabled(false);

        btnCancelar.setText("CANCELAR");
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelarMouseClicked(evt);
            }
        });
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setToolTipText("");

        pnlAsientos.setBackground(new java.awt.Color(31, 50, 69));
        pnlAsientos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Asientos disponibles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlAsientos.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane2.setViewportView(pnlAsientos);

        javax.swing.GroupLayout pnlEntradasLayout = new javax.swing.GroupLayout(pnlEntradas);
        pnlEntradas.setLayout(pnlEntradasLayout);
        pnlEntradasLayout.setHorizontalGroup(
            pnlEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEntradasLayout.createSequentialGroup()
                        .addComponent(pnlGrupo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEntradasLayout.createSequentialGroup()
                        .addGap(0, 532, Short.MAX_VALUE)
                        .addComponent(btnCancelar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEntradasLayout.createSequentialGroup()
                        .addComponent(cmbSectores, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnComprar))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        pnlEntradasLayout.setVerticalGroup(
            pnlEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(pnlGrupo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSectores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnComprar)
                    .addComponent(jLabel1)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar)
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSectoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSectoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSectoresActionPerformed

    private void cmbSectoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectoresItemStateChanged
        if (evt.getSource()==cmbSectores) {
            String select=(String)cmbSectores.getSelectedItem();
            DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
            modelo.setRowCount(1);
            modelo.setValueAt(null, 0, 1);
            modelo.setValueAt(null, 0, 2);
            modelo.setValueAt(null, 0, 3);
            modelo.setValueAt(null, 0, 4);
            
            try{String consulta = "SELECT Asientos FROM Sector_Evento WHERE IdSector=? AND IdEvento=?;";

                PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
                ps.setInt(1, Integer.parseInt(select.split("\\| ")[0].trim()));
                ps.setInt(2, eventoID);
                ResultSet rs = ps.executeQuery();
                if(rs.next()){
                    String jsonData = rs.getString("Asientos");
                    jsonAsientos = new JSONArray(jsonData);
                    matAsientos= new JToggleButton[jsonAsientos.length()][jsonAsientos.getJSONArray(0).length()];
                    pnlAsientos.removeAll();
                    pnlAsientos.setLayout(new GridLayout(jsonAsientos.length(),jsonAsientos.getJSONArray(0).length(),0,5));
                    
                    for(int f = 0; f<jsonAsientos.length(); f++){
                        for(int c = 0; c<jsonAsientos.getJSONArray(0).length(); c++){
                            matAsientos[f][c]=new JToggleButton();
                            matAsientos[f][c].setPreferredSize(new Dimension(50,50));
                            pnlAsientos.add(matAsientos[f][c]);
                            //matAsientos[f][c].setBounds(c*(612/jsonAsientos.getJSONArray(0).length()) +5, f*(612/jsonAsientos.getJSONArray(0).length()) +20, 612/jsonAsientos.getJSONArray(0).length(), 612/jsonAsientos.getJSONArray(0).length());
                            if(jsonAsientos.getJSONArray(f).getInt(c) == 0){
                                matAsientos[f][c].setEnabled(false);}
                            
                            final int fila = f;  // Usamos 'final' para que esté disponible dentro de la clase anónima
                            final int columna = c;  // Usamos 'final' también para columna
                            matAsientos[f][c].addItemListener(new ItemListener() {
                                    @Override
                                    public void itemStateChanged(ItemEvent e) {
                                    if(e.getStateChange() == ItemEvent.SELECTED){
                                        try{
                                            String consulta = "SELECT solicitarAsiento(?,?,?,?) AS libre;";

                                            PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
                                            ps.setInt(1, fila);
                                            ps.setInt(2, columna);
                                            ps.setInt(3, Integer.parseInt(select.split("\\| ")[0].trim()));
                                            ps.setInt(4, eventoID);
                                            ResultSet rs = ps.executeQuery();
                                            if(rs.next()){
                                                boolean libre= rs.getBoolean("libre");
                                                DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
                                                if(libre){
                                                    jsonAsientos.getJSONArray(fila).put(columna,2);
                                                    for (int r = 0; r < modelo.getRowCount(); r++) {
                                                        Object asiento = modelo.getValueAt(r, 3);
                                                        if (asiento == null) {
                                                            String item = (String) cmbSectores.getSelectedItem();
                                                            modelo.setValueAt(item.split("\\| ")[1].trim(), r, 1);
                                                            modelo.setValueAt(fila+1, r, 2);
                                                            modelo.setValueAt(columna+1, r, 3);
                                                            int descuento = arrDescs.get(arrMiembros.indexOf(modelo.getValueAt(r, 0)));
                                                            double coste = arrPrecios.get(cmbSectores.getSelectedIndex());
                                                            modelo.setValueAt(coste-((descuento*coste)/100), r, 4);
                                                            modelo.setValueAt(String.valueOf(descuento)+"%", r, 5);
                                                            txtTotal.setText(String.valueOf(Double.parseDouble(txtTotal.getText()) + (coste-((descuento*coste)/100))));
                                                            //JOptionPane.showMessageDialog(null, "Se le ha aplicado un descuento del: "+String.valueOf(descuento)+'%');
                                                            break;
                                                        }}
                                                }else{
                                                    JOptionPane.showMessageDialog(null, "El asiento ya está ocupado");
                                                    jsonAsientos.getJSONArray(fila).put(columna,0);
                                                }
                                                
                                            }uptBotones();
                                        }catch(Exception e2){
                                            JOptionPane.showMessageDialog(null, "Error al consultar asiento: "+e2.toString());
                                        }finally{
                                            conexion.Desconectar();
                                        }
                                    }else if (e.getStateChange() == ItemEvent.DESELECTED){
                                        try{
                                            String consulta = "UPDATE Sector_Evento " +
                                                                "SET Asientos = JSON_SET(Asientos, CONCAT('$[', ?, '][', ?, ']'), 1) " +
                                                                "WHERE IdSector = ? AND IdEvento = ?;";

                                            PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
                                            ps.setInt(1, fila);
                                            ps.setInt(2, columna);
                                            String item = (String) cmbSectores.getSelectedItem();
                                            ps.setInt(3, Integer.parseInt(item.split("\\| ")[0].trim()));
                                            ps.setInt(4, eventoID);
                                            ps.executeUpdate();
                                            
                                            DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
                                            for (int r = 0; r < modelo.getRowCount(); r++) {
                                                Object fil = modelo.getValueAt(r, 2);
                                                Object asiento = modelo.getValueAt(r, 3);
                                                if ((Integer)asiento-1 == columna && (Integer)fil-1 == fila) {
                                                    modelo.setValueAt(null, r, 1);
                                                    modelo.setValueAt(null, r, 2);
                                                    modelo.setValueAt(null, r, 3);
                                                    txtTotal.setText(String.valueOf(Double.parseDouble(txtTotal.getText()) - (Double)modelo.getValueAt(r, 4)));
                                                    modelo.setValueAt(null, r, 4);
                                                    modelo.setValueAt(null, r, 5);
                                                    break;
                                                }
                                            }
                                            uptBotones();
                                        }catch(Exception e2){
                                            JOptionPane.showMessageDialog(null, "Error al conusltar asiento: "+e2.toString());
                                        }finally{
                                            conexion.Desconectar();
                                        }
                                    }}
                                });
                            if(jsonAsientos.getJSONArray(f).getInt(c) == 0){
                                matAsientos[f][c].setEnabled(false);
                            }
                            pnlAsientos.add(matAsientos[f][c]);
                        }
                        System.out.println(jsonAsientos.getJSONArray(f).toString());
                    }
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error al consultar asientos: "+e.toString());
            }finally{
                conexion.Desconectar();
            }
        }
    }//GEN-LAST:event_cmbSectoresItemStateChanged

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnComprarActionPerformed

    private void btnComprarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnComprarMouseClicked
        boolean espacio = false;
        DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
        for (int f = 0; f < modelo.getRowCount(); f++) {
            Object asiento = modelo.getValueAt(f, 3);
            if (asiento == null) {
                espacio = true;
                break;}
        }
        if(espacio == false){
            dialogTarjeta dialog = new dialogTarjeta(ventanaCompra.this,true,tblEntradas,cmbSectores,txtTotal,usuarioID,eventoID);
            dialog.setVisible(true);
        }else{
           JOptionPane.showMessageDialog(null, "Falta completar entradas"); 
        }
    }//GEN-LAST:event_btnComprarMouseClicked

    private void btnCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseClicked
        int result = JOptionPane.showConfirmDialog(
            this, // Ventana padre
            "¿Estás seguro de que quieres cancelar?", // Mensaje
            null, // Título
            JOptionPane.YES_NO_OPTION, // Opciones disponibles
            JOptionPane.QUESTION_MESSAGE // Tipo de icono
        );

        // Comprobar la respuesta del usuario
        if (result == JOptionPane.YES_OPTION) {
            DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
            for (int f = 0; f < modelo.getRowCount(); f++) {
                Object celda = modelo.getValueAt(f, 3);
                if (celda != null) {
                    try{
                        String consulta = "UPDATE Sector_Evento " +
                                            "SET Asientos = JSON_SET(Asientos, CONCAT('$[', ?, '][', ?, ']'), 1) " +
                                            "WHERE IdSector = ? AND IdEvento = ?;";

                        PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
                        ps.setInt(1, (Integer)modelo.getValueAt(f, 2)-1);
                        ps.setInt(2, (Integer)modelo.getValueAt(f, 3)-1);
                        String item = (String) cmbSectores.getSelectedItem();
                        ps.setInt(3, Integer.valueOf(item.split("\\| ")[0].trim()));
                        ps.setInt(4, eventoID);
                        ps.executeUpdate();
                    }catch(Exception e2){
                        JOptionPane.showMessageDialog(null, "Error al liberar asiento: "+e2.toString());
                    }finally{
                        conexion.Desconectar();}
                }
            }
            Principal principal = new Principal(usuarioID);
            principal.setVisible(true);
            principal.setLocationRelativeTo(null);
            principal.setSize(900,520);
            principal.setResizable(false);
            this.dispose();
        } else {
            System.out.println("Cancelación abortada");
        }
    }//GEN-LAST:event_btnCancelarMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        
    }//GEN-LAST:event_btnCancelarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    private void setChecks(){
        try{
            int ejeY =5;
            String consulta = "SELECT U.IDUsuario, U.Nombre_usuario, SS.ID, C.CompraID, M.Descuento " +
                        "FROM Usuario U INNER JOIN Grupo G ON U.IDUsuario=G.IDUsuario " +
                        "LEFT JOIN Compra C ON U.IDUsuario = C.IDUsuario AND C.IdEvento = ? " +
                        "LEFT JOIN Socio S ON U.IDUsuario=S.IDUsuario " +
                        "LEFT JOIN Socios_Suspendidos SS ON S.IDUsuario=SS.ID_Usuario " +
                        "LEFT JOIN Membresia M ON S.IDMembresia=M.IDMembresia " +
                        "WHERE G.GrupoID=(SELECT GrupoID FROM Grupo WHERE IDUsuario=?);";
            
            PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
            ps.setInt(1, eventoID);
            ps.setInt(2, usuarioID);
            ResultSet rs = ps.executeQuery();
            UIManager.put("CheckBox.disabledText", Color.BLACK); // Establece el color de texto deshabilitado
            UIManager.put("CheckBox.background", new Color(99,140,181));
            while(rs.next()){
                
                String nombreUsuario= rs.getString("Nombre_usuario");
                int compra= rs.getInt("CompraID");
                int suspendido= rs.getInt("ID");
                
                JCheckBox box = new JCheckBox(nombreUsuario);
                box.setBounds(10,ejeY+38,130,23);
                
                if(!rs.wasNull() || compra!=0){
                    System.out.println(nombreUsuario);
                    box.setEnabled(false);
                }else{
                    int Descuento= rs.getInt("Descuento");
                    int Id= rs.getInt("IDUsuario");
                    if(Id==usuarioID){
                        box.setText(nombreUsuario+"(Tú)");
                        box.setBounds(10,20,130,23);
                        box.setSelected(true);
                        box.setEnabled(false);
                        DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
                        modelo.addRow(new Object[]{nombreUsuario,null,null,null,null});
                        arrMiembros.add(nombreUsuario);
                        arrDescs.add(0,Descuento);
                    }else{
                        box.addItemListener(new ItemListener() {
                            private boolean inProgress;
                        @Override
                        public void itemStateChanged(ItemEvent e) {
                            DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
                            
                            if(e.getStateChange() == ItemEvent.SELECTED && !inProgress){
                                modelo.addRow(new Object[]{nombreUsuario,null,null,null,null});
                            }else if(e.getStateChange() == ItemEvent.DESELECTED){
                                inProgress = true;
                                for (int r = 0; r < modelo.getRowCount(); r++) {
                                    System.out.println(r);
                                    if(modelo.getValueAt(r, 0)==nombreUsuario){
                                        if(modelo.getValueAt(r, 3)!=null){
                                            int fila =(Integer)modelo.getValueAt(r, 2);
                                            int asiento =(Integer)modelo.getValueAt(r, 3);
                                            try{
                                                String consulta = "UPDATE Sector_Evento " +
                                                                    "SET Asientos = JSON_SET(Asientos, CONCAT('$[', ?, '][', ?, ']'), 1) " +
                                                                    "WHERE IdSector = ? AND IdEvento = ?;";

                                                PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
                                                ps.setInt(1, fila-1);
                                                ps.setInt(2, asiento-1);
                                                String item = (String) cmbSectores.getSelectedItem();
                                                ps.setInt(3, Integer.parseInt(item.split("\\| ")[0].trim()));
                                                ps.setInt(4, eventoID);
                                                ps.executeUpdate();
                                                jsonAsientos.getJSONArray(fila-1).put(asiento-1,1);
                                                matAsientos[fila-1][asiento-1].setSelected(false);
                                                System.out.println("listo");
                                            }catch(Exception e2){
                                                JOptionPane.showMessageDialog(null, "Error al liberar: "+e2.toString());
                                            }finally{
                                                conexion.Desconectar();
                                                txtTotal.setText(String.valueOf(Double.parseDouble(txtTotal.getText()) - (Double)modelo.getValueAt(r, 4)));
                                            }
                                        }
                                        modelo.removeRow(r);
                                        break;
                                    }}
                                }
                                // Restablecer la bandera después de procesar
                                inProgress = false;
                                uptBotones();
                            }
                        });
                        arrMiembros.add(nombreUsuario);
                        arrDescs.add(Descuento);
                        ejeY+=23;
                    }
                }
                pnlGrupo.add(box);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error al consultar grupo: "+e.toString());
        }finally{
            conexion.Desconectar();
        }
    }
    
    private void cargarSectores(){
        try{
                String consulta = "SELECT S.idSector, S.NombreSector, PS.Precio FROM PrecioSectorEvento PS " +
                        "INNER JOIN Sector S ON PS.idSector=S.idSector WHERE PS.idEvento=?;";

                PreparedStatement ps = conexion.Conectar().prepareStatement(consulta);
                ps.setInt(1, eventoID);
                ResultSet rs = ps.executeQuery();
                while(rs.next()){
                    int id= rs.getInt("idSector");
                    String nombre= rs.getString("NombreSector");
                    double precio= rs.getDouble("Precio");

                    arrPrecios.add(precio);
                    cmbSectores.addItem(String.format("%" + 3 + "s",String.valueOf(id))+"| "+nombre);
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error al consultar sectores: "+e.toString());
            }finally{
                conexion.Desconectar();
                
            }
    }
    
    private void uptBotones(){
        try{boolean espacio = false;
            DefaultTableModel modelo = (DefaultTableModel) tblEntradas.getModel();
            for (int f = 0; f < modelo.getRowCount(); f++) {
                Object celda = modelo.getValueAt(f, 3);
                if (celda == null || (Integer) celda == 0) {
                    espacio = true;
                    break;
                }
            }
            for(int f = 0; f<jsonAsientos.length(); f++){
                for(int c = 0; c<jsonAsientos.getJSONArray(0).length(); c++){
                    if(jsonAsientos.getJSONArray(f).getInt(c) == 0 && matAsientos[f][c].isEnabled()){
                        matAsientos[f][c].setEnabled(false);}
                    if(jsonAsientos.getJSONArray(f).getInt(c) == 1 && !matAsientos[f][c].isEnabled()){
                        matAsientos[f][c].setEnabled(true);}
                    if(espacio==false && jsonAsientos.getJSONArray(f).getInt(c) != 2){
                        matAsientos[f][c].setEnabled(false);}
                }
            }
        }catch(JSONException e){
            JOptionPane.showMessageDialog(null, "Error de json: "+e.toString());
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaCompra(9,1).setVisible(true);
            }
        });
    }
    public JTable getTable() {
        return tblEntradas;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnComprar;
    protected javax.swing.JComboBox<String> cmbSectores;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlAsientos;
    private javax.swing.JPanel pnlEntradas;
    private javax.swing.JPanel pnlGrupo;
    protected javax.swing.JTable tblEntradas;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
